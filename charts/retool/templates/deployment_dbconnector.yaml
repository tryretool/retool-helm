{{- if .Values.dbconnector.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "retool.fullname" . }}-dbconnector
  labels:
    retoolService: {{ template "retool.fullname" . }}-dbconnector
spec:
  replicas: {{ .Values.dbconnector.replicas }}
  selector:
    matchLabels:
      retoolService: {{ template "retool.fullname" . }}-dbconnector
  template:
    metadata:
      labels:
        retoolService: {{ template "retool.fullname" . }}-dbconnector
    spec:
{{- if .Values.dbconnector.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.dbconnector.terminationGracePeriodSeconds }} 
{{- end }}
      containers:
      - args:
        - bash
        - -c
        - chmod -R +x ./docker_scripts; sync; ./docker_scripts/start_api.sh        
        image: "{{ .Values.image.repository }}:{{ required "Please set a value for .Values.image.tag" .Values.image.tag }}"
        name: {{ template "retool.fullname" . }}-dbconnector
        readinessProbe:
          httpGet:
            path: {{ .Values.readinessProbe.path }}
            port: 3002
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessProbe.path }}
            port: 3002
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          failureThreshold:  {{ .Values.livenessProbe.failureThreshold }}
        resources:
{{ toYaml .Values.dbconnector.resources | indent 10 }}
        env:
          - name: DEPLOYMENT_TEMPLATE_TYPE
            value: {{ template "retool.deploymentTemplateType" . }}
          - name: DEPLOYMENT_TEMPLATE_VERSION
            value: {{ template "retool.deploymentTemplateVersion" . }}
          - name: NODE_ENV
            value: production
          - name: RTEL_SERVICE_NAME
            value: retool_dbconnector
          - name: K8S_DEPLOYMENT
            value: {{ template "retool.fullname" . }}-dbconnector
          - name: NODE_OPTIONS
            value: {{(.Values.workflows.config).nodeOptions | default "--max_old_space_size=1024" }}
          {{- if $.Values.dbconnector.java.enabled }}
          - name: SERVICE_TYPE
            value: DB_CONNECTOR,DB_SSH_CONNECTOR,JAVA_DBCONNECTOR
          {{- else }}
          - name: SERVICE_TYPE
            value: DB_CONNECTOR,DB_SSH_CONNECTOR
          {{- end }}
          - name: DBCONNECTOR_HTTP_AGENT_MAX_SOCKETS
            value: "1000"
          - name: DBCONNECTOR_POSTGRES_POOL_MAX_SIZE
            value: "100"
          - name: DBCONNECTOR_QUERY_TIMEOUT_MS
          {{- if .Values.workflows.dbConnectorTimeout }}
            value: {{ .Values.workflows.dbConnectorTimeout | quote}}
          {{- else if .Values.config.dbConnectorTimeout }}
            value: {{ .Values.config.dbConnectorTimeout | quote}}
          {{- else }}
            value: "5400000"
          {{- end }}
          - name: DISABLE_DATABASE_MIGRATIONS
            value: "true"
          - name: WORKFLOW_BACKEND_HOST
            value: http://{{ template "retool.fullname" . }}-workflow-backend
          - name: CLIENT_ID
            value: {{ default "" .Values.config.auth.google.clientId }}
          - name: COOKIE_INSECURE
            value: {{ .Values.config.useInsecureCookies | quote }}
          {{- if and (((.Values.workflows.config).otelCollector).enabled) (((.Values.workflows.config).otelCollector).endpoint) }}
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
             value: {{ ((.Values.workflows.config).otelCollector).endpoint }}
          {{- else if ((.Values.workflows.config).otelCollector).enabled }}
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: "http://$(HOST_IP):4317"
          {{- end }}
          {{- if and (not .Values.externalSecrets.enabled) (not .Values.externalSecrets.externalSecretsOperator.enabled) }}
          - name: LICENSE_KEY
            valueFrom:
              secretKeyRef:
                {{- if .Values.config.licenseKeySecretName }}
                name: {{ .Values.config.licenseKeySecretName }}
                key: {{ .Values.config.licenseKeySecretKey | default "license-key" }}
                {{- else }}
                name: {{ template "retool.fullname" . }}
                key: license-key
                {{- end }}
          - name: JWT_SECRET
            valueFrom:
              secretKeyRef:
                {{- if .Values.config.jwtSecretSecretName }}
                name: {{ .Values.config.jwtSecretSecretName }}
                key: {{ .Values.config.jwtSecretSecretKey | default "jwt-secret" }}
                {{- else }}
                name: {{ template "retool.fullname" . }}
                key: jwt-secret
                {{- end }}
          - name: ENCRYPTION_KEY
            valueFrom:
              secretKeyRef:
                {{- if .Values.config.encryptionKeySecretName }}
                name: {{ .Values.config.encryptionKeySecretName }}
                key: {{ .Values.config.encryptionKeySecretKey | default "encryption-key" }}
                {{- else }}
                name: {{ template "retool.fullname" . }}
                key: encryption-key
                {{- end }}
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
          {{- if  .Values.postgresql.enabled }}
                name: {{ template "retool.postgresql.fullname" . }}
                # `postgres` is the default admin username for postgres in the subchart we use, so it needs the admin password
                # if a different username is picked, then it needs the custom password instead.
                {{- if eq .Values.postgresql.auth.username "postgres" }}
                key: postgres-password
                {{- else }}
                key: password
                {{- end }}
          {{- else }}
                {{- if .Values.config.postgresql.passwordSecretName }}
                name: {{ .Values.config.postgresql.passwordSecretName }}
                key: {{ .Values.config.postgresql.passwordSecretKey | default "postgresql-password" }}
                {{- else }}
                name: {{ template "retool.fullname" . }}
                key: postgresql-password
                {{- end }}
          {{- end }}
          - name: CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                {{- if .Values.config.auth.google.clientSecretSecretName }}
                name: {{ .Values.config.auth.google.clientSecretSecretName }}
                key: {{ .Values.config.auth.google.clientSecretSecretKey | default "google-client-secret" }}
                {{- else }}
                name: {{ template "retool.fullname" . }}
                key: google-client-secret
                {{- end }}
          {{- end }}
          {{- range $key, $value := .Values.env }}
          - name: "{{ $key }}"
            value: "{{ $value }}"
          {{- end }}
          {{- range .Values.environmentSecrets }}
          - name: {{ .name }}
            valueFrom:
              secretKeyRef:
                name: {{ .secretKeyRef.name }}
                key: {{ .secretKeyRef.key }}
          {{- end }}
          {{- with .Values.environmentVariables }}
{{ toYaml . | indent 10 }}
          {{- end }}
          {{- include "retool.sharedEnv" $ | nindent 10 }}
        {{- if .Values.externalSecrets.enabled }}
        envFrom:
        - secretRef:
            name: {{ .Values.externalSecrets.name }}
        {{- range .Values.externalSecrets.secrets }}
        - secretRef:
            name: {{ .name }}
        {{- end }}
        {{- end }}
        {{- if .Values.externalSecrets.externalSecretsOperator.enabled  }}
        envFrom:
        {{- range .Values.externalSecrets.externalSecretsOperator.secretRef }}
        - secretRef:
            name: {{ .name }}
        {{- end }}
        {{- end }}
        volumeMounts:
        - name: dsdsocket
          mountPath: /var/run/datadog
        {{- range $configFile := (keys .Values.files) }}
        - name: {{ template "retool.name" $ }}
          mountPath: "/usr/share/retool/config/{{ $configFile }}"
          subPath: {{ $configFile }}
        {{- end }}
        {{if and .Values.persistentVolumeClaim.enabled .Values.persistentVolumeClaim.mountPath }}
        - name: retool-pv
          mountPath: {{ .Values.persistentVolumeClaim.mountPath }}
        {{- end }}
{{- if .Values.extraVolumeMounts }}
{{ toYaml .Values.extraVolumeMounts | indent 8 }}
{{- end }}
{{- with .Values.extraContainers }}
{{ tpl . $ | indent 6 }}
{{- end }}
{{- range .Values.extraConfigMapMounts }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          subPath: {{ .subPath }}
{{- end }}
    {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.image.pullSecrets | indent 8 }}
    {{- end }}
    {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
    {{- end }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- if .Values.securityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.securityContext.runAsUser }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
{{- end }}
      volumes:
      - name: dsdsocket
        hostPath:
          path: /var/run/datadog/
{{- range .Values.extraConfigMapMounts }}
        - name: {{ .name }}
          configMap:
            name: {{ .configMap }}
{{- end }}
        {{- if .Values.persistentVolumeClaim.enabled }}
        - name: retool-pv
          persistentVolumeClaim:
            claimName: {{ default (include "retool.fullname" .) .Values.persistentVolumeClaim.existingClaim }}
        {{- end }}
{{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | indent 8 }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "retool.fullname" . }}-dbconnector
spec:
  selector:
    retoolService: {{ template "retool.fullname" . }}-dbconnector
  ports:
  - protocol: TCP
    name: {{ template "retool.name" . }}
    port: 3002
    targetPort: 3002
{{- end }}
